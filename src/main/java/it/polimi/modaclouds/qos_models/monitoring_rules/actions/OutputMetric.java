/**
 * Copyright 2014 deib-polimi
 * Contact: deib-polimi <marco.miglierina@polimi.it>
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package it.polimi.modaclouds.qos_models.monitoring_rules.actions;

import it.polimi.modaclouds.qos_models.monitoring_rules.ConfigurationException;
import it.polimi.modaclouds.qos_models.monitoring_rules.EnumErrorType;
import it.polimi.modaclouds.qos_models.monitoring_rules.Problem;
import it.polimi.modaclouds.qos_models.schema.Action;
import it.polimi.modaclouds.qos_models.schema.Metric;
import it.polimi.modaclouds.qos_models.schema.MonitoringRule;
import it.polimi.modaclouds.qos_models.util.Config;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class OutputMetric extends AbstractAction {

	public static final String ID = "OutputMetric";

	public static final String metric = "metric";
	public static final String resourceId = "resourceId";
	public static final String value = "value";

	private final Set<String> requiredParameters = new HashSet<String>();

	public OutputMetric() {
		requiredParameters.add(metric);
		requiredParameters.add(resourceId);
		requiredParameters.add(value);
	}

	@Override
	Set<String> getMyRequiredPars() {
		return requiredParameters;
	}

	@Override
	public String getId() {
		return ID;
	}

	@Override
	public Set<Problem> validate(MonitoringRule rule,
			List<MonitoringRule> otherRules) {
		Set<Problem> problems = new HashSet<Problem>();
		List<String> metrics = getOutputMetrics(rule);
		if (!findDuplicates(metrics).isEmpty()) {
			problems.add(new Problem(rule.getId(),
					EnumErrorType.INVALID_ACTION, ID,
					"Metrics name can only be used once"));
		}
		try {
			for (Metric metric : Config.getInstance().getMonitoringMetrics()
					.getMetrics()) {
				if (metrics.contains(metric.getName())) {
					problems.add(new Problem(
							rule.getId(),
							EnumErrorType.INVALID_ACTION,
							ID,
							metric.getName()
									+ " is already collected by some data collector"));
					break;
				}
			}
		} catch (ConfigurationException e) {
			getLogger().warn(
					"The list of available matrics could not be loaded", e);
		}
		if (otherRules != null) {
			for (MonitoringRule otherRule : otherRules) {
				for (String metric : metrics) {
					if (getOutputMetrics(otherRule).contains(metric)) {
						problems.add(new Problem(rule.getId(),
								EnumErrorType.INVALID_ACTION, ID, "Metric "
										+ metric
										+ " is already generated by rule "
										+ otherRule.getId()));
					}
				}
			}
		}
		return problems;
	}

	private List<String> getOutputMetrics(MonitoringRule rule) {
		List<String> metrics = new ArrayList<String>();
		Set<Action> actions = getMyActions(rule);
		for (Action action : actions) {
			metrics.add(getParameters(action).get(metric));
		}
		return metrics;
	}

	private static Set<String> findDuplicates(List<String> list) {

		final Set<String> duplicates = new HashSet<String>();
		final Set<String> set1 = new HashSet<String>();

		for (String yourInt : list) {
			if (!set1.add(yourInt)) {
				duplicates.add(yourInt);
			}
		}
		return duplicates;
	}

}